# Работа с регулярными выражениями

# Для чего нужны регулярные выражения(правила)?
# Правила обладают собственным языком, который может описать множество строчек. 

# Приведём пример:

/(MyISAM|InnoDB)/
/^GET\s+(\S+)/i
# Страшные строки=) На самом деле всё не так сложно, перейдём к их разбору.


# Правила состоят из:

# Символьные классы
# Квантификаторы
# Альтернативы
# Группировки
# Модификаторы
# Рассмотрим каждую часть отдельно

# Символьные классы
# Символьный класс - просто конечный набор символов.

/[abcde]/ #=> простое перечисление символов
/[A-ZА-Я]/ #=> все латинские и русские заглавные
/[0-9a-z]/ #=> цифры и строчная латиница
/[^0-9]/ #=> все символы, кроме цифр

# Как видим набор символов ограничивается квадратными скобками "[" и "]".
# Если мы хотим создать диапазон значений, то мы используем дефис "-", что мы и видим в примерах. 
# Символ "^" означает отрицание, т.е. этот символ(диапазон символов) будет исключён. 
# Существут ряд кототких обозначений символльных классов.

# Сокращённые обозначения символьных классов
# \s       - [\f\t\n\r]           - Пробельный символ
# \S      - [^\f\t\n\r]         - Любой символ, кроме пробельного
# \d      - [0-9]                 - Цифра
# \D     - [^0-9]               - Любой символ, кроме цифры
# \w     - [a-zA-Z0-9]     - Латиница или цифра
# \W    - [^a-zA-Z0-9]   - Любой символ, кроме латиницы или цифры
# [^\n\r]               - Любой символ, кроме перевода строки
# \b                                   - Граница слова
# \B                                  - Не граница слова
# \A                                  - Начало строки
# \Z                                  - Конец строки
# Квантификатор
# Квантификатор показывает сколько раз может повторяться предыдущий символ(или группа символов)

# /\d{3}/ #=> три цифры
# /\d{1, 3}/ #=> одна, две или три цифры
# /[a-zA-Z]{3, }/ #=> латинское слово длинной три символа и больше
# Квантификатор, имеющий только один параметр, называется точным, т.е.указывает точное количество повторений.
# Квантификатор, имеющий два параметра, называется конечным, т.е.указывает диапазон значений, в котором варьируется количество повторений.
# Квантификатор, имеющий один параметр с запятой, называется бесконечным, т.е.ограничивает количество повторений лишь " слева ".
# Сокращённые обозначения квантификаторов
# * - {0, } - Любое количество
# + - {1, } - Один и более
# ? - {0, 1} - Есть или нет
# Альтернатива
# Правила, входящие в альтернативу, разделяются | (вертикальной чертой, которая и является альтернативой).
# Альтернатива нужна, когда необходимо объединить несколько правил в одно.При этом совпадение засчитывается, когда есть совпадение хотя бы с одним правилом.
# Альтернативу желательно заключать в скобки.
                                                                                                                                                                                                                                                                                                   /(\w+|[а-яА-Я]+)/ #=> или слово на латинице, или русское
# Группировка
# Группировка используется, когда необходимо обрабатывать результат частями.
# Например, при обработке ссылок в HTML-документе удобно отдельно обрабатывать текст ссылки и URL.
# Группировка также как и альтернатива, заключается в круглые скобки.Более того, альтернатива обрабатывается как группировка.
# Доступ к результату совпадения каждой группировки осуществляется посредством специальных переменных $1, $2, ..., $9.
# " 2+7*3 ".gsub(/(\d+)\*(\d+)/) { $1.to_i * $2.to_i } #=> "2+21
# Существует много видов группировок.Например, (?: ...) - группировка без сохранения результата в " долларовую переменную "
# или (?! ...) - негативная группировка.В любом случае они ограничиваются парой круглых скобок.

# Фиксирующая директива
# Фиксирующие директивы - это символы, которые привязывают правило к некоторому признаку.Например, к концу или началу строки.

# /^ \ d+/ #=> строка начинается с числа
# / \ w+$/ #=> последнее слово на латинице или число
# /^$/ #=> пустая строка
#  ^ - привязка к началу строки,
#  $ - привязка к концу строки.

# Модификатор
# Модификатор предназначен для изменения поведения правила.Он размещается сразу же после правила (после последней наклонной черты).

# /(hello|world)/i #=> или "hello", или "world". Причём независимо от регистра
# /\s+/mix #=> несколько подряд идущих пробельных символов
# Модификаторы:

# multiline - перенос строки считается простым символом
# ignorcase - поиск без учёта регистра(только для латиницы)
# extended - игнорировать пробельные символы