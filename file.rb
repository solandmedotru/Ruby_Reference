# Работа с файлами

# Существует три метода работы с файлами:

# Если файл нужно читать полностью, то самым лучшим способом будет использование класса IO.
# (лучше так работать с текстовым файлом, с бинарным лучше выбрать другой способ)
# Можность использовать перенаправление поток в $stdin(входные данные), $stdout(выходные данные), $stderr(вывод ошибок)
# Универсальный способ работы с файлами в том случае, когда первые два способа неподошли.

# Перейдём к примерам:

# Использование класса IO
my_file = IO.read('temp.txt')
my_file.class #=> String
# В переменную my_file запишутся данные из файла temp.txt, в результате чего my_file будет строкой.

# Перенаправление потока
$stdin = File.open('входные данные.txt')
$stdout = File.open('выходные данные.txt', 'w')
$stderr = File.open('сообщения об ошибках.txt', 'a')
puts 'Выходные данные будут сохранены в файл' #=> в файл "выходные данные.txt"
raise 'Принудительно вызываем ошибку' #=> в файл "сообщения об ошибках.txt"

# Универсальный способ работы с файлами
my_file = File.open('входные данные.txt', 'r') { |file| file.read }
File.open('выходные данные.txt', 'w') { |file| file.write my_file }
File.open('выходные данные.txt', "a") { |file| file.puts my_file }

# Cуществует несколько вариантов работы с файлом. В нашем примере мы используем "r"(читаем файл),
# "w"(записываем, удаляя всё, что было раньше), "a"(добавляем в конец файла).
# Метод "r" можно не писать, он подразумевается "по умолчанию".

# В переменную my_file запишутся данные из файла "входные данные.txt". После выполнения второй строчки кода,
# в файл "выходные данные.txt" запишутся данные из переменной my_file, при этом затрутся все предыдущие записи в этом файле.
# После выполнения третий строчки кода, данные допишутся в конец файла "выходные данные.txt".
# Запись может осуществляться как методом .write, так и методом .puts.